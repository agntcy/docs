// Copyright AGNTCY Contributors (https://github.com/agntcy)
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package routing.v1alpha1;

import "google/protobuf/empty.proto";
import "core/v1alpha1/object.proto";
import "routing/v1alpha1/peer.proto";

// Defines an interface for publication and retrieval
// of objects across interconnected network.
service RoutingService {
  // Notifies the network that the node is providing given object.
  // Listeners should use this event to update their routing tables.
  // They may optionally forward the request to other nodes.
  // Items need to be periodically republished to avoid stale data.
  //
  // It is the API responsibility to fully construct the routing details,
  // these are minimal details needed for us to publish the request.
  rpc Publish(PublishRequest) returns (google.protobuf.Empty);
  // List all the available items across the network.
  // TODO: maybe remove to search?
  rpc List(ListRequest) returns (stream ListResponse);
  // Unpublish a given object.
  // This will remove the object from the network.
  rpc Unpublish(UnpublishRequest) returns (google.protobuf.Empty);
}

message PublishRequest {
  // Published record reference.
  // On publish, we read from the local store and extract the neccessary labels.
  core.v1alpha1.ObjectRef record = 1;

  // Announce the publication to the network.
  // This item will end up in the network
  // and can be searched.
  optional bool network = 2;
}

message ListRequest {
  // Target peer.
  // If selected, it returns the skill details for this peer.
  // It may use labels to only return selected labels.
  optional Peer peer = 1;

  // Target labels.
  // For example, labels={"skill=text", "skill=text/rag"}
  repeated string labels = 2;

  // Target object, if any.
  // If set, it will return only the object with the given reference.
  optional core.v1alpha1.ObjectRef record = 3;

  // Max routing depth.
  optional uint32 max_hops = 4;

  // Run a networked query.
  optional bool network = 5;
}

message ListResponse {
  message Item {
    // Labels associated with a given object
    repeated string labels = 1;

    // Optionally sends count details about individual skill.
    // This is only set when querying labels or our own current peer.
    // For record requests, only returns the data about that record.
    map<string, uint64> label_counts = 2;

    // Peer that returned this object.
    Peer peer = 3;

    // Found object if any.
    // If empty, then only the labels are important.
    optional core.v1alpha1.ObjectRef record = 4;
  }

  // Returned items that match a given request
  repeated Item items = 1;
}

message UnpublishRequest {
  // Reference to the record to be unpublished.
  // On unpublish, we read from the local store and remove the associated labels.
  core.v1alpha1.ObjectRef record = 1;

  // Notify the network about the unpublication.
  // This will remove the item from the network
  // and make it no longer searchable.
  optional bool network = 2;
}
